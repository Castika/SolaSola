# This workflow automatically validates code, builds, and scans the Docker image
# whenever a pull request is opened against the 'main' branch.
# Use this with branch protection rules to prevent merging faulty code.

# This workflow automatically validates code, builds, and scans the Docker image
# whenever a pull request is opened against the 'main' branch.
# Use this with branch protection rules to prevent merging faulty code.

name: Validate Pull Request

on:
  pull_request:
    branches: [ "main" ]
    # --- OPTIMIZATION: Run this workflow ONLY when relevant files are changed ---
    # This prevents the long validation process from running on simple changes
    # to documentation (like README.md) or other non-code files.
    paths:
      - 'solasola/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'Dockerfile'
      - '.github/workflows/docker-scan.yml'

permissions:
  contents: read          # To check out the repository's code.
  security-events: write  # To upload the SARIF results from Docker Scout to the GitHub Security tab.
  pull-requests: write    # To post status checks back to the pull request.

jobs:
  # This is the main validation job.
  validate:
    name: Validate, Build, and Scan
    runs-on: ubuntu-latest

    steps:
      - name: Free up disk space (jlumbroso/free-disk-space)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          # This is a more aggressive and reliable cleanup action that replaces
          # both the 'maximize-build-space' action and the broken Flink script.
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          remove-docker-images: true

      - name: Verify Disk Space After Cleanup
        run: |
          echo "--- Available Disk Space After Aggressive Cleanup ---"
          df -h /
          echo "----------------------------------------------------------------"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python and Poetry
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Configure Poetry to use a local virtualenv
        working-directory: .
        run: poetry config virtualenvs.in-project true

      - name: Check available disk space before install
        working-directory: .
        run: |
          echo "--- Available Disk Space ---"
          echo "Workspace:"
          df -h .
          echo "Root:"
          df -h /
          echo "Runner Home:"
          df -h /home/runner

      - name: Install dependencies
        working-directory: .
        env:
          TMPDIR: ${{ github.workspace }}/.tmp
          # --- DEFINITIVE FIX: Redirect poetry and pip caches to the large workspace volume ---
          POETRY_CACHE_DIR: ${{ github.workspace }}/.poetry-cache
          PIP_CACHE_DIR: ${{ github.workspace }}/.pip-cache
        run: |
          mkdir -p .tmp .poetry-cache .pip-cache
          poetry install

      - name: Clean up Poetry and pip caches
        run: |
          rm -rf ${{ github.workspace }}/.poetry-cache ${{ github.workspace }}/.pip-cache

      - name: Check available disk space after install
        working-directory: .
        run: |
          echo "--- Available Disk Space After Install ---"
          df -h .

      - name: Lint code with flake8
        working-directory: .
        run: poetry run flake8 solasola/

      - name: Run tests with pytest
        working-directory: .
        run: poetry run pytest

      - name: Clean up test artifacts
        working-directory: .
        run: |
          rm -rf .pytest_cache

      - name: Check for forbidden files tracked by Git
        working-directory: .
        run: |
          # This script explicitly checks for files that should never be committed, based on .gitignore rules.
          # Hardcoding these patterns makes the workflow's security checks self-contained and explicit.
          FORBIDDEN_PATTERNS=(
            "__pycache__/"
            "\.py[cod]$"
            "\\$py\.class$"
            "\.venv/"
            "env/"
            "venv/"
            "build/"
            "dist/"
            "\.egg-info/"
            "\.vscode/"
            "\.pytest_cache/"
            "\.coverage$"
            "\.DS_Store$"
            "Thumbs\.db$"
            "\.log$"
            "requirements\.txt$"
            "dog\.sh$"
            "dogwin\.sh$"
            "publish\.sh$"
            "solasola-test-image\.tar$"
          )
          # Find forbidden files and replace newlines with spaces to ensure single-line output for the error message.
          FORBIDDEN_FILES=$(git ls-files | grep -E "$(IFS=\| ; echo "${FORBIDDEN_PATTERNS[*]}")" | tr '\n' ' ')

          if [ -n "$FORBIDDEN_FILES" ]; then
            # Use a GitHub Actions error command to force the output to be visible.
            # This will create a clear annotation on the pull request.
            echo "::error::Forbidden files found in Git index: $FORBIDDEN_FILES"
            exit 1
          fi
          echo "âœ… No forbidden files are being tracked by Git."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image locally for scanning
        working-directory: .
        run: |
          docker buildx build \
            --no-cache \
            --platform linux/amd64 \
            --cache-to type=inline \
            --progress=plain \
            --tag castika/solasola:ci-scan \
            --load .

      - name: Prune Docker Builder Cache
        # --- DEFINITIVE FIX: Always run this step, even if the build fails ---
        # This ensures that we clean up build cache to make space for the runner's own logs.
        if: always()
        run: |
          echo "Pruning Docker builder cache to free up space..."
          docker builder prune -af

      - name: Scan image with Docker Scout
        # --- DEFINITIVE FIX: Use the official Docker Scout action ---
        # This is more robust than a manual `run` command and ensures the correct
        # version and flags are used, resolving the 'unknown flag' error.
        uses: docker/scout-action@v1
        with:
          command: cves
          image: castika/solasola:ci-scan
          exit-code: true
          only-severities: critical,high
          sarif-file: scout-report.sarif

      - name: Upload Docker Scout SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scout-report.sarif
